name: CI Pipeline

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  # Job for linting, type checking, unit testing
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out the repository
      - name: Check out code
        uses: actions/checkout@v3

      # Cache node_modules
      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('yarn.lock') }}

      # Step 2: Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22.21.0'
          cache: 'yarn'

      - name: Install Yarn
        run: npm install -g yarn

      # Step 3: Install dependencies and iOS Pods
      - name: Install dependencies
        run: yarn install

      # Step 4: Run linters (ESLint)
      - name: Run ESLint
        run: yarn lint

      # Step 5: Run TypeScript type checks
      - name: Run TypeScript type check
        run: yarn typecheck

      # Step 6: Run unit tests (Jest)
      - name: Run unit tests
        run: yarn test --coverage

  # Job for Android build
  build-android:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      # Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22.21.0'
          cache: 'yarn'

      # Cache node_modules
      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('yarn.lock') }}

      - name: Install Yarn
        run: npm install -g yarn

      - name: Install dependencies
        run: yarn install

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Create dummy google-services.json for CI
        run: |
          cat > android/app/google-services.json << 'EOL'
          {
            "project_info": {
              "project_number": "000000000000",
              "project_id": "dummy-project-for-ci",
              "storage_bucket": "dummy-project-for-ci.appspot.com"
            },
            "client": [{
              "client_info": {
                "mobilesdk_app_id": "1:000000000000:android:0000000000000000",
                "android_client_info": {
                  "package_name": "com.pocketpalai"
                }
              },
              "api_key": [{
                "current_key": "dummy-api-key-for-ci-builds"
              }]
            }]
          }
          EOL

      - name: Create dummy .env file for CI
        run: |
          cat > .env << 'EOL'
          FIREBASE_FUNCTIONS_URL=https://dummy-firebase-url.com

          # PalsHub/Supabase Configuration
          SUPABASE_URL=https://dummy-supabase-url.supabase.co
          SUPABASE_ANON_KEY=dummy-anon-key-for-ci-builds
          PALSHUB_API_BASE_URL=https://dummy-palshub-api.com

          # App Configuration
          APP_URL=pocketpal://app

          # Feature Flags (true/false)
          ENABLE_PALSHUB_INTEGRATION=true
          ENABLE_AUTHENTICATION=true
          ENABLE_OFFLINE_MODE=true

          # Google Sign-In Configuration
          GOOGLE_IOS_CLIENT_ID=dummy-ios-client-id.apps.googleusercontent.com
          GOOGLE_WEB_CLIENT_ID=dummy-web-client-id.apps.googleusercontent.com
          EOL

      - name: Create dummy release keystore for CI
        working-directory: android/app
        run: |
          # Generate a dummy keystore for CI builds
          keytool -genkeypair -v \
            -storetype PKCS12 \
            -keystore pocketpal-release-key.keystore \
            -alias pocketpal_key_alias \
            -keyalg RSA \
            -keysize 2048 \
            -validity 10000 \
            -storepass dummy-ci-password \
            -keypass dummy-ci-password \
            -dname "CN=CI Build, OU=CI, O=PocketPal, L=CI, S=CI, C=US"

      - name: Build Android Release
        working-directory: android
        env:
          APP_RELEASE_STORE_PASSWORD: dummy-ci-password
          APP_RELEASE_KEY_PASSWORD: dummy-ci-password
        run: ./gradlew assembleRelease

      - name: Upload Android APK
        uses: actions/upload-artifact@v4
        with:
          name: android-release-apk
          path: android/app/build/outputs/apk/release/app-release.apk

  # Job for iOS build
  build-ios:
    runs-on: macos-15  # macOS 15 with Xcode 16
    needs: build-and-test
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      # Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22.21.0'
          cache: 'yarn'

      # Cache node_modules
      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('yarn.lock') }}

      - name: Install Yarn
        run: npm install -g yarn

      - name: Install dependencies
        run: yarn install
      
      - name: Create Env.xcconfig
        run: |
          cat > ios/Config/Env.xcconfig << 'EOL'
          // This file contains environment-specific build settings.

          GOOGLE_WEB_CLIENT_ID = dummy-web-client-id.apps.googleusercontent.com
          REVERSED_GOOGLE_IOS_CLIENT_ID = com.googleusercontent.apps.dummy-ios-client-id

          EOL

      - name: Create dummy .env file for CI
        run: |
          cat > .env << 'EOL'
          FIREBASE_FUNCTIONS_URL=https://dummy-firebase-url.com

          # PalsHub/Supabase Configuration
          SUPABASE_URL=https://dummy-supabase-url.supabase.co
          SUPABASE_ANON_KEY=dummy-anon-key-for-ci-builds
          PALSHUB_API_BASE_URL=https://dummy-palshub-api.com

          # App Configuration
          APP_URL=pocketpal://app

          # Feature Flags (true/false)
          ENABLE_PALSHUB_INTEGRATION=true
          ENABLE_AUTHENTICATION=true
          ENABLE_OFFLINE_MODE=true

          # Google Sign-In Configuration
          GOOGLE_IOS_CLIENT_ID=dummy-ios-client-id.apps.googleusercontent.com
          GOOGLE_WEB_CLIENT_ID=dummy-web-client-id.apps.googleusercontent.com
          EOL

      - name: Create dummy GoogleService-Info.plist for CI
        run: |
          cat > ios/GoogleService-Info.plist << 'EOL'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>CLIENT_ID</key>
            <string>dummy-client-id.apps.googleusercontent.com</string>
            <key>REVERSED_CLIENT_ID</key>
            <string>com.googleusercontent.apps.dummy-client-id</string>
            <key>API_KEY</key>
            <string>dummy-api-key-for-ci-builds</string>
            <key>GCM_SENDER_ID</key>
            <string>000000000000</string>
            <key>PLIST_VERSION</key>
            <string>1</string>
            <key>BUNDLE_ID</key>
            <string>ai.pocketpal</string>
            <key>PROJECT_ID</key>
            <string>dummy-project-for-ci</string>
            <key>STORAGE_BUCKET</key>
            <string>dummy-project-for-ci.appspot.com</string>
            <key>IS_ADS_ENABLED</key>
            <false/>
            <key>IS_ANALYTICS_ENABLED</key>
            <false/>
            <key>IS_APPINVITE_ENABLED</key>
            <false/>
            <key>IS_GCM_ENABLED</key>
            <true/>
            <key>IS_SIGNIN_ENABLED</key>
            <true/>
            <key>GOOGLE_APP_ID</key>
            <string>1:000000000000:ios:0000000000000000</string>
          </dict>
          </plist>
          EOL

      - name: Install CocoaPods dependencies
        run: |
          cd ios
          pod install
          cd ..

      - name: Build iOS Release
        run: |
          cd ios
          xcodebuild \
            -workspace PocketPal.xcworkspace \
            -scheme PocketPal \
            -configuration Release \
            -sdk iphonesimulator \
            -arch x86_64 \
            -destination 'platform=iOS Simulator,name=iPhone 16 Pro' \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            ONLY_ACTIVE_ARCH=NO \
            | xcpretty || true
